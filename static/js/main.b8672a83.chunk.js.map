{"version":3,"sources":["DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","clickHandler","audio","play","props","handleDisplay","id","keyPressHandler","e","keyCode","inherits","createClass","key","value","document","addEventListener","removeEventListener","_this2","react_default","a","createElement","className","onClick","letter","src","ref","Component","drumPadData","App","state","display","displayHandler","setState","map","d","src_DrumPad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8672a83.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class DrumPad extends Component {\r\n    \r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.keyPressHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keyup', this.keyPressHandler);\r\n    }\r\n    \r\n    clickHandler = () => {\r\n        this.audio.play();\r\n        this.props.handleDisplay(this.props.id);\r\n      }\r\n\r\n      keyPressHandler = (e) => {\r\n        if (e.keyCode === this.props.keyCode) {\r\n          this.audio.play();\r\n          this.props.handleDisplay(this.props.id);\r\n        }\r\n      }\r\n\r\n    render() {       \r\n\r\n        return (\r\n            <div \r\n                className=\"drum-pad\" \r\n                id={this.props.id} \r\n                onClick={this.clickHandler}\r\n            >\r\n                <h1>{this.props.letter}</h1>\r\n                <audio id={this.props.letter}\r\n                    className=\"clip\"\r\n                    src={this.props.src}\r\n                    ref={ref => this.audio = ref}>\r\n                </audio>\r\n            </div>\r\n        );        \r\n    }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DrumPad from './DrumPad';\n\nconst drumPadData = [\n  {\n    id: \"Chewbacca\", \n    letter: \"q\",\n    keyCode: 81, \n    src: \"https://www.myinstants.com/media/sounds/chewbacca_PaZrPCY.mp3\"\n  },\n  {\n    id: \"R2D2\",\n    letter: \"w\",\n    keyCode: 87,\n    src: \"https://www.myinstants.com/media/sounds/r2d2.swf.mp3\"\n  },\n  {\n    id: \"Lightsaber\",\n    letter: \"e\",\n    keyCode: 69,\n    src: \"https://www.myinstants.com/media/sounds/sithignition.mp3\"\n  },\n  {\n    id: \"Blasters\",\n    letter: \"a\",\n    keyCode: 65,\n    src: \"https://www.myinstants.com/media/sounds/star-wars-blaster-sound-effects-star-wars-sound-effects-mp3cut.mp3\"\n  },\n  {\n    id: \"Star Destroyer\",\n    letter: \"s\",\n    keyCode: 83,\n    src: \"https://www.myinstants.com/media/sounds/star-wars-stardestroyer-blaster-sound-effect-1.mp3\"\n  },\n  {\n    id: \"C3Po\",\n    letter: \"d\",\n    keyCode: 68,\n    src: \"https://www.myinstants.com/media/sounds/hello-c3po.mp3\"\n  },\n  {\n    id: \"Yoda\",\n    letter: \"z\",\n    keyCode: 90,\n    src: \"https://www.myinstants.com/media/sounds/seek-him-out-you-must-yoda.mp3\"\n  },\n  {\n    id: \"Battle Droid\",\n    letter: \"x\",\n    keyCode: 88,\n    src: \"https://www.myinstants.com/media/sounds/star-wars-b1-battle-droid_kampfdroide-roger-roger-sound.mp3\"\n  },\n  {\n    id: \"Admiral Ackbar\",\n    letter: \"c\",\n    keyCode: 67,\n    src: \"https://www.myinstants.com/media/sounds/adm-ackbar-its-a-trap.mp3\"\n  }\n];\n\nclass App extends Component {\n  state = {\n    display: \"Click or Press a Key\"\n  }\n\n  displayHandler = (display) => {\n    this.setState({ display });\n  } \n\n  render() {\n    return (\n      <div id=\"drum-machine\" className=\"App\">\n        <h1 id=\"display\">{this.state.display}</h1>\n        <div id=\"drum-pads\" className=\"stars\">{drumPadData.map(d => (\n          <DrumPad\n            key={d.id}\n            id={d.id}\n            letter={d.letter}\n            src={d.src}\n            keyCode={d.keyCode}\n            clickHandler={this.clickHandler}\n            handleDisplay={this.displayHandler}\n          />   \n         ))}</div>        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}